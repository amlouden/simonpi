#!/bin/bash

# Network Variables
BRIDGE=rasp-br0
IPFORWARD=$(sysctl -n net.ipv4.ip_forward)
TAP=rasp-tap0
GATEWAY=192.168.66.1
FIRSTIP="${GATEWAY%.1}.2"
LASTIP="${GATEWAY%.1}.254"
BROADCAST="${GATEWAY%.1}.255"
NET="${GATEWAY%.1}.0"

genMAC() {
	# Generate Random MAC ADDRESS to avoid collisions
	printf "52:54:%02x:%02x:%02x:%02x" $(( RANDOM & 0xff)) $(( RANDOM & 0xff )) $(( RANDOM & 0xff)) $(( RANDOM & 0xff ))
}

checkTap() {
	if [ -d "/sys/class/net/$TAP" ]; then
		while [ -d "/sys/class/net/$TAP" ]; do
			TAPON=1
			TAP=rasp-tap$(( ${TAP##rasp-tap} + 1 ))
		done
	else
		TAPON=0
	fi
}

checkDnsmasq() {
	DNSMASQPID=$(pgrep -f $GATEWAY)
}

setupDnsmasq() {
	local nameservers
	local searchdomains

	DNSMASQ_OPTS="--listen-address=$GATEWAY --interface=$BRIDGE \
		--bind-interfaces --dhcp-range=$FIRSTIP,$LASTIP"

	# Build DNS options from container /etc/resolv.conf
	mapfile -t nameservers < <(grep nameserver /etc/resolv.conf | sed 's/nameserver //')
	mapfile -t searchdomains < <(grep search /etc/resolv.conf | sed 's/search //' | sed 's/ /,/g')

	domainname=$(echo "${searchdomains[@]}" | awk -F"," '{print $1}')

	for nameserver in "${nameservers[@]}"; do
		[[ -z $DNS_SERVERS ]] && DNS_SERVERS=$nameserver || DNS_SERVERS="$DNS_SERVERS,$nameserver"
	done

	DNSMASQ_OPTS="$DNSMASQ_OPTS --dhcp-option=option:dns-server,$DNS_SERVERS --dhcp-option=option:router,$GATEWAY --dhcp-option=option:domain-name,$domainname"

	if [ -z "$DNSMASQPID" ] && ! ss -ntl | grep -q :53; then
		echo -e "[$PASS] Turning up dnsmasq for guest IP assignment ..."
		eval "sudo -E $DNSMASQ $DNSMASQ_OPTS"
	elif [ -z "$DNSMASQPID" ] && ss -ntl | grep -q :53; then
		echo -e "[$WARN] Port 53 is busy"
		echo -e "[$WARN] Trying to use local dns service ( maybe offline )"
		DNSMASQ_OPTS="$DNSMASQ_OPTS --port=0"
		eval "sudo -E $DNSMASQ $DNSMASQ_OPTS"
	else
		echo -e "[$WARN] Another instance of $DNSMASQ is running ..."
	fi
}

killDnsmasq() {
	if [ ! -z "$DNSMASQPID" ]; then
		sudo -E kill -9 "$DNSMASQPID"
	fi
}

killNetwork() {
	echo -e "[$PASS] Shutting down present network for QEMU ..."
	checkDnsmasq
	killDnsmasq

	while [ -d "/sys/class/net/$BRIDGE" ] || [ -d "/sys/class/net/$TAP" ]; do
		sudo -E "$IP" link set "$TAP" nomaster > /dev/null 2>&1 # Enslave tap
		sudo -E "$IP" tuntap del dev "$TAP" mode tap > /dev/null  2>&1 # Remove tap
		sudo -E "$IP" link delete "$BRIDGE" type bridge > /dev/null 2>&1 # Remove bridge
		sudo -E sysctl -w net.ipv4.ip_forward="$IPFORWARD" > /dev/null
	done
}

fkillNetwork() {
	echo -e "[$PASS] Forced network shutdown for QEMU ..."
	checkDnsmasq
	killDnsmasq

	while [ -d "/sys/class/net/$BRIDGE" ] || [ ! -z "$(find /sys/class/net/ -name "rasp*")" ]; do
		for i in $(ls -d /sys/class/net/rasp-tap*); do
			sudo -E "$IP" link set "${i##*/}" nomaster > /dev/null 2>&1 # Enslave tap
			sudo -E "$IP" tuntap del dev "${i##*/}" mode tap > /dev/null  2>&1 # Remove tap
		done
		sudo -E "$IP" link delete "$BRIDGE" type bridge > /dev/null 2>&1 # Remove bridge
	done
}

bridgeUp() {
	sudo -E "$IP" link add "$BRIDGE" type bridge # add bridge
	sudo -E "$IP" addr add "$GATEWAY"/24 broadcast "$BROADCAST" dev "$BRIDGE" # Set ip to bridge interface
	sudo -E "$IP" link set "$BRIDGE" up
}

setTap() {
	sudo -E "$IP" tuntap add dev "$TAP" mode tap # Add tap interface
	sudo -E "$IP" link set $TAP master "$BRIDGE" # Bind tap to bridge
	sudo -E "$IP" link set "$TAP" up promisc on
}

createNetwork() {
	echo -e "[$PASS] Turning up a network for QEMU ..."
	if [ "$IPFORWARD" != "1" ]; then
		sudo -E sysctl -w net.ipv4.ip_forward=1 > /dev/null
	fi

	if [ $TAPON -eq 0 ]; then
		bridgeUp
	fi

	setTap
	checkDnsmasq
	setupDnsmasq
	sudo -E "$IPTABLES" -t nat -I POSTROUTING -s "$NET"/24 -j MASQUERADE # Nat configuration
	# Hack for guest VMs complaining about "bad udp checksums in 5 packets"
	sudo -E "$IPTABLES" -A POSTROUTING -t mangle -p udp --dport bootpc -j CHECKSUM --checksum-fill
	echo -e "[$PASS] Gateway address: $G$GATEWAY$RST"
}
