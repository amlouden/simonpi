#!/bin/bash

# Network Variables
BRIDGE=rasp-br0
IPFORWARD=$(cat /proc/sys/net/ipv4/ip_forward)
GATEWAY=192.168.66.1
FIRSTIP="${GATEWAY%.1}.2"
LASTIP="${GATEWAY%.1}.254"
BROADCAST="${GATEWAY%.1}.255"
NET="${GATEWAY%.1}.0"

genMAC() {
	# Generate Random MAC ADDRESS to avoid collisions
	printf "52:54:%02x:%02x:%02x:%02x" $(( RANDOM & 0xff)) $(( RANDOM & 0xff )) $(( RANDOM & 0xff)) $(( RANDOM & 0xff ))
}

getInternetIf() {
	iface=$(ip route | grep default | sed -e "s/^.*dev.//" -e "s/.proto.*//")
	echo "$iface"
}

checkDnsmasq() {
	DNSMASQPID=$(pgrep -f $GATEWAY)
}

setupDnsmasq() {
	local nameservers
	local searchdomains

	DNSMASQ_OPTS="--listen-address=$GATEWAY --interface=$BRIDGE \
		--bind-interfaces --dhcp-range=$FIRSTIP,$LASTIP"

	# Build DNS options from container /etc/resolv.conf
	mapfile -t nameservers < <(grep nameserver /etc/resolv.conf | sed 's/nameserver //')
	mapfile -t searchdomains < <(grep search /etc/resolv.conf | sed 's/search //' | sed 's/ /,/g')

	domainname=$(echo "${searchdomains[@]}" | awk -F"," '{print $1}')
	
	if ! [[ -z $domainname  ]]; then
		DNSMASQ_OPTS="$DNSMASQ_OPTS --dhcp-option=option:domain-name,$domainname"
	fi

	for nameserver in "${nameservers[@]}"; do
		[[ -z $DNS_SERVERS ]] && DNS_SERVERS=$nameserver || DNS_SERVERS="$DNS_SERVERS,$nameserver"
	done

	if [ -z "$DNSMASQPID" ] && ! ss -ntl | grep -q :53; then
		echo -e "[$PASS] Turning up dnsmasq for guest IP assignment ..."
		DNSMASQ_OPTS="$DNSMASQ_OPTS --dhcp-option=option:dns-server,$DNS_SERVERS --dhcp-option=option:router,$GATEWAY"
		eval "sudo -E $DNSMASQ $DNSMASQ_OPTS"
	elif [ -z "$DNSMASQPID" ] && ss -ntl | grep -q :53; then
		echo -e "[$WARN] Port 53 is busy"
		echo -e "[$WARN] Trying to use local dns service ( maybe offline )"
		DNSMASQ_OPTS="$DNSMASQ_OPTS --dhcp-option=option:dns-server,127.0.0.1 --port=0"
		eval "sudo -E $DNSMASQ $DNSMASQ_OPTS"
	else
		echo -e "[$WARN] Another instance of $DNSMASQ is running ..."
	fi
}

killDnsmasq() {
	if [ ! -z "$DNSMASQPID" ]; then
		sudo -E kill -9 "$DNSMASQPID"
	fi
}

killNetwork() {
	echo -e "[$PASS] Shutting down present network for QEMU ..."
	checkDnsmasq
	killDnsmasq

	while [ -d "/sys/class/net/$BRIDGE" ]; do
		sudo -E "$IP" link delete "$BRIDGE" type bridge > /dev/null 2>&1 # Remove bridge
		sudo -E su -c "echo $IPFORWARD > /proc/sys/net/ipv4/ip_forward"
	done
}

fkillNetwork() {
	echo -e "[$PASS] Forced network shutdown for QEMU ..."
	checkDnsmasq
	killDnsmasq

	while [ -d "/sys/class/net/$BRIDGE" ]; do
		sudo -E "$IP" link delete "$BRIDGE" type bridge > /dev/null 2>&1 # Remove bridge
	done
}

bridgeUp() {
	sudo -E "$IP" link add "$BRIDGE" type bridge # add bridge
	sudo -E "$IP" addr add "$GATEWAY"/24 broadcast "$BROADCAST" dev "$BRIDGE" # Set ip to bridge interface
	sudo -E "$IP" link set "$BRIDGE" up
}

enslaveInternetIf() {
	iface=$(getInternetIf)
	sudo -E "$IPTABLES" -t nat -A POSTROUTING -o "$iface" -j MASQUERADE
	sudo -E "$IPTABLES" -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
	sudo -E "$IPTABLES" -A FORWARD -i "$BRIDGE" -o "$iface" -j ACCEPT
}

createNetwork() {
	echo -e "[$PASS] Turning up a network for QEMU ..."
	if [ "$IPFORWARD" != "1" ]; then
		sudo -E su -c "echo $IPFORWARD > /proc/sys/net/ipv4/ip_forward"
	fi

	bridgeUp
	enslaveInternetIf
	checkDnsmasq
	setupDnsmasq

	echo -e "[$PASS] Gateway address: $G$GATEWAY$RST"
}