#!/bin/bash

SIMONPIFOLDER=~/.simonpi
MOUNTFOLDERS=("boot" "root")
BOOTPATH="$SIMONPIFOLDER/$MODEL/${MOUNTFOLDERS[0]}"
ROOTPATH="$SIMONPIFOLDER/$MODEL/${MOUNTFOLDERS[1]}"
IMGMOUNTED=
PMOUNTED=
START1=
START2=
LENGHT1=
LENGHT2=

# Loopback devices
DEVICE1=/dev/loop0
DEVICE2=/dev/loop1

checkFs() {
	echo -e "[$G+$RST] Checking partitions to prevent failures ..."
	$VFATCHK $DEVICE1
	$EXT4CHK $DEVICE2
}

checkMount() {
	if [ $SNDARG = "-c" ]; then
		if [ $IMGMOUNTED = "0" ] && [ $PMOUNTED = "0" ]; then
			mapImg
			mountImg
		elif [ $IMGMOUNTED = "1" ] && [ $PMOUNTED = "0" ]; then
			return
		elif [ $PMOUNTED = "1" ]; then
			umountParts
		else
			exit 1
		fi
	fi

	if [ $SNDARG = "-e" ] || [ $SNDARG = "-p" ]; then
		if [ $IMGMOUNTED = "0" ] && [ $PMOUNTED = "0" ]; then
			return
		elif [ $IMGMOUNTED = "1" ] && [ $PMOUNTED = "0" ]; then
			umountImg
		elif [ $PMOUNTED = "1" ]; then
			umountParts
			umountImg
		fi
	fi

	if [ $SNDARG = "-m" ]; then
		if [ $IMGMOUNTED = "0" ] && [ $PMOUNTED = "0" ]; then
			mapImg
			mountImg
			mountParts
		elif [ $IMGMOUNTED = "1" ] && [ $PMOUNTED = "0" ]; then
			mountParts
		elif [ $PMOUNTED = "1" ]; then
			return
		else
			exit 1
		fi
	fi

	if [ $SNDARG = "-r" ]; then
		if [ $IMGMOUNTED = "0" ] && [ $PMOUNTED = "0" ]; then
			mapImg
			mountImg
			mountParts
		elif [ $IMGMOUNTED = "1" ] && [ $PMOUNTED = "0" ]; then
			mountParts
		elif [ $PMOUNTED = "1" ]; then
			return
		else
			exit 1
		fi
	fi

	if [ $SNDARG = "-u" ]; then
		if [ $IMGMOUNTED = "0" ] && [ $PMOUNTED = "0" ]; then
			echo -e "[$G!$RST] $FILENAME disk image not mounted"
		elif [ $IMGMOUNTED = "1" ] && [ $PMOUNTED = "0" ]; then
			umountImg
		elif [ $PMOUNTED = "1" ]; then
			umountParts
			umountImg
		else
			exit 1
		fi
	fi
}

isMounted() {
	if [ ! -f $SIMONPIFOLDER/$FILENAME ]; then
		echo -e "[$Y!$RST] No sd image to use on QEMU. Perhaps you have purged $FILENAME."
		IMGMOUNTED=2
		PMOUNTED=2
	elif [[ $(mount | grep $BOOTPATH) ]]; then
		IMGMOUNTED=1
		PMOUNTED=1
	elif [[ ! $(mount | grep $BOOTPATH) ]] && [[ $(mount | grep $DEVICE1) ]]; then
		IMGMOUNTED=0
		PMOUNTED=1
	else
		IMGMOUNTED=0
		PMOUNTED=0
	fi
}

formatLoDevices() {
	echo -e "[$G+$RST] Creating partitions on disk image named $FILENAME ..."
	$VFAT -n boot -F 32 $DEVICE1 > /dev/null 2>&1
	$EXT4 -L rootfs $DEVICE2 > /dev/null 2>&1
	sync
}

mountParts() {
	checkFolders
	echo -e "[$G+$RST] Mounting partitions of $FILENAME ..."
	mount $DEVICE1 "$BOOTPATH"
	mount $DEVICE2 "$ROOTPATH"
}

umountParts() {
	echo -e "[$G+$RST] Umounting partitions of $FILENAME ..."
	mountpointloop1=$(grep $DEVICE1 /proc/mounts | cut -d ' ' -f 2)
	mountpointloop2=$(grep $DEVICE2 /proc/mounts | cut -d ' ' -f 2)
	mountpoints=("$mountpointloop1" "$mountpointloop2")

	for i in ${mountpoints[@]}; do
		umount "$i"
	done
}

listStorage() {
	checkFolders
	echo -e "[$Y!$RST] Content of $SIMONPIFOLDER/$MODEL"
	ls $SIMONPIFOLDER/$MODEL
}

mapImg() {
	echo -e "[$G+$RST] Mapping lenghts of partitions ..."
	START1=$(fdisk -lo Start $SIMONPIFOLDER/$FILENAME | tail -n 2 | head -n -1)
	START2=$(fdisk -lo Start $SIMONPIFOLDER/$FILENAME | tail -n 1)
	LENGTH1=$(fdisk -lo Sectors $SIMONPIFOLDER/$FILENAME | tail -n 2 | head -n -1)
	LENGHT2=$(fdisk -lo Sectors $SIMONPIFOLDER/$FILENAME | tail -n 1)
}

mountImg() {
	echo -e "[$G+$RST] Mounting disk image named $FILENAME ..."
	losetup -o $(( START1*512 )) --sizelimit $(( LENGHT1*512 )) $DEVICE1 $SIMONPIFOLDER/$FILENAME > /dev/null 2>&1
	losetup -o $(( START2*512 )) --sizelimit $(( LENGHT2*512 )) $DEVICE2 $SIMONPIFOLDER/$FILENAME > /dev/null 2>&1
}

umountImg() {
	echo -e "[$G+$RST] Unmounting disk image named $FILENAME ..."
	losetup -D
}

purge () {
	rm -rf $SIMONPIFOLDER/$FILENAME
	echo -e "[$G+$RST] Soft cleaning ..."
}

purgeEverything() {
	rm -rf $SIMONPIFOLDER/$MODEL/
	echo -e "[$G+$RST] Hard cleaning ..."
}
