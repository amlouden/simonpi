#!/bin/bash

OPT=.

# You could overwrite paths using VARNAME=value ./simonpi

# Software used in this script.
AWK=awk
BSDTAR=bsdtar
DNSMASQ=dnsmasq
EXT4=mkfs.ext4
EXT4CHK=fsck.ext4
FDISK=fdisk
GREP=grep
IP=ip
IPTABLES=iptables
PS=ps
QEMUARM=qemu-system-arm
QEMUARM64=qemu-system-aarch64
VFAT=mkfs.vfat
VFATCHK=fsck.vfat
WGET=wget
PROGS=("$AWK" "$BSDTAR" "$DNSMASQ" "$EXT4" "$FDISK" "$GREP" "$IPTABLES" "$PS" "$QEMUARM" "$QEMUARM64" "$VFAT" "$WGET")

# Parameters, Folders and Files
SNDARG=$2
GIGA=$3
MODEL=$1
FILENAME="sd-arch-$MODEL-qemu.img"

# Importing external scripts
. $OPT/simonpiemu/checks
. $OPT/simonpiemu/docker
. $OPT/simonpiemu/storage
. $OPT/simonpiemu/custom
. $OPT/simonpiemu/downimage
. $OPT/simonpiemu/network
. $OPT/simonpiemu/qemu
. $OPT/simonpiemu/runemu

# Text Colors
R='\e[0;31m'
G='\e[0;32m'
Y='\e[0;33m'
RST='\e[0m'

# Must be root to use this tool
if [[ ! $EUID -eq 0 ]];then
	if [[ -x "$(command -v sudo)" ]]; then
		exec sudo -E bash "$0" "$@"
		exit $?
	else
		echo -e "[$Y!$RST] sudo is needed. Please run this script as root or install sudo."
		exit 1
	fi
fi

checkModel() {
	if [[ $MODEL != rpi* ]]; then
		echo "Please select the rpi model"
		echo "Available:	rpi	rpi-2	rpi-3"
		exit 1
	fi
}

checkDeps() {
	for i in "${PROGS[@]}"; do
		if [ $(which $i 2>/dev/null) ]; then
			echo -e "[$G+$RST] $i executable found"
		else
			echo -e "[$R-$RST] $i executable not found. Please install it on your distro"
			exit 1;
		fi
	done
}

checkFolders() {
	for i in ${MOUNTFOLDERS[@]}; do
		if [ -d "$SIMONPIFOLDER/$MODEL/$i" ]; then
			echo -e "[$Y!$RST] $MODEL/$i folder is present"
		else
			echo -e "[$G+$RST] Creating $MODEL/$i folder ..."
			mkdir -p "$SIMONPIFOLDER/$MODEL/$i"
		fi
	done
}

createImg() {
	isaNumber='^[0-9]+$'
	if ! [[ $GIGA =~ $isaNumber ]] || [ -z $GIGA ]; then
		echo -e "[$R-$RST] Please specify a size in GB"
		exit 1
	elif [ $GIGA -lt 2 ]; then
		echo -e "[$R-$RST] Please specify a size >= 2 GB"
		exit 1
	fi
	checkDeps
	isMounted
	downloadImage

	if [ -e "$SIMONPIFOLDER/$FILENAME" ]; then
		echo -e "[$Y!$RST] An $FILENAME file already exists. Please delete it"
		exit 1
	else
		SIZE=$(( GIGA*256 ))
		echo -e "[$G+$RST] Creating a $GIGA GB disk image named $FILENAME ..."
		dd if=/dev/zero of="$SIMONPIFOLDER/$FILENAME" bs=4M count="$SIZE" > /dev/null 2>&1

		echo -e "[$G+$RST] Creating partition table on $FILENAME ..."
		(echo o; echo n; echo p; echo 1; echo 8192; echo +100M; echo t; echo c; \
		echo n; echo p; echo 2; echo 8192; echo ; echo ; echo w) | \
		$FDISK -H 255 -S 63 "$SIMONPIFOLDER/$FILENAME" >/dev/null 2>&1
	fi
	sync
	mapImg
	mountImg
	formatLoDevices
	mountParts
	echo -e "[$G+$RST] Extracting $ARCHIMG to $FILENAME ..."
	$BSDTAR -xpf $SIMONPIFOLDER/$MODEL/$ARCHIMG -C "$ROOTPATH"
	sync
	customContent
	mv $ROOTPATH/boot/* $BOOTPATH
	sync
	umountParts
	umountImg
	echo -e "[$G+$RST] DONE"
}

help () {
	echo "Create a raw partitioned img for rpi-(1-2-3) emulation on QEMU"
	echo -e "Default storage is in $G$SIMONPIFOLDER$RST"
	echo "usage: ./simonpi MODEL [<opts>]"
	echo "	Available MODELs:	rpi	rpi-2	rpi-3"
	echo "	<opts>	-h			print this message"
	echo "		-c			check filesystem integrity for .img file"
	echo "		-e			purge everything in storage folder"
	echo "		-k			kill every instance and network virtual interface"
	echo "		-l			list files in storage folder"
	echo "		-m			mount only loop devices ($DEVICE1, $DEVICE2)"
	echo "		-p			purge everything except Arch Linux archives"
	echo "		-r			run QEMU processor emulator for defined model"
	echo "		-s	<size in G>	write a partitioned raw .img file with Arch Linux"
	echo "		-u			unmount ${MOUNTFOLDERS[0]} and ${MOUNTFOLDERS[1]} folders"
	echo "examples:"
	echo "	./simonpi rpi-3 -s 2		create a 2GB sd .img for rpi-3"
	echo "	./simonpi rpi-2 -p		purge everything related to rpi-2 img creation"
	exit 0
}

process_args () {
	# Process other arguments.
	case "$1" in
		-h    ) help ;;
		rpi   ) checkModel ;;
		rpi-2 ) checkModel ;;
		rpi-3 ) checkModel ;;
		-*    ) help ;;
		*     ) checkModel ;;
	esac
	case "$2" in
		-c	  ) isMounted && checkMount && checkFs ;;
		-e	  ) isMounted && checkMount && purge && purgeEverything ;;
		-k	  ) checkQemu && killQemu && killNetwork ;;
		-l	  ) listStorage ;;
		-m	  ) isMounted && checkMount ;;
		-p	  ) isMounted && checkMount && purge ;;
		-r    ) isMounted && checkMount && presetsGen && run_emu ;;
		-s    ) createImg ;;
		-u    ) isMounted && checkMount ;;
		*     ) echo 'Please type -h for details' ;;
	esac
}

process_args $@;
