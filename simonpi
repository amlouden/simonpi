#!/bin/bash

OPT=.

# You could overwrite paths using VARNAME=value ./simonpi

# Software used in this script.
AWK=awk
BSDTAR=bsdtar
DNSMASQ=dnsmasq
EXT4=mkfs.ext4
EXT4CHK=fsck.ext4
FDISK=fdisk
GREP=grep
IP=ip
IPTABLES=iptables
PS=ps
QEMUARM=qemu-system-arm
QEMUARM64=qemu-system-aarch64
VFAT=mkfs.vfat
VFATCHK=fsck.vfat
WGET=wget
PROGS=("$AWK" "$BSDTAR" "$DNSMASQ" "$EXT4" "$FDISK" "$GREP" "$IPTABLES" "$PS" "$QEMUARM" "$QEMUARM64" "$VFAT" "$WGET")

# Parameters, Folders and Files
SNDARG=$2
GIGA=$3
MODEL=$1
FILENAME="sd-arch-$MODEL-qemu.img"

# Importing external scripts
. $OPT/simonpiemu/checks
. $OPT/simonpiemu/docker
. $OPT/simonpiemu/storage
. $OPT/simonpiemu/custom
. $OPT/simonpiemu/images
. $OPT/simonpiemu/network
. $OPT/simonpiemu/qemu
. $OPT/simonpiemu/runemu

# Text Colors
R='\e[0;31m'
G='\e[0;32m'
Y='\e[0;33m'
RST='\e[0m'

# Must be root to use this tool
checkRoot() {
	if [[ ! $EUID -eq 0 ]];then
		if [[ -x "$(command -v sudo)" ]]; then
			exec sudo -E bash "$0" "$@"
			exit $?
		else
			echo -e "[$Y!$RST] sudo is needed. Please run this script as root or install sudo."
			exit 1
		fi
	fi
}

checkModel() {
	if [[ $MODEL != rpi* ]]; then
		echo "Please select the rpi model"
		echo "Available:	rpi	rpi-2	rpi-3"
		exit 1
	fi
}

checkDeps() {
	for i in "${PROGS[@]}"; do
		if [ $(which $i 2>/dev/null) ]; then
			echo -e "[$G+$RST] $i executable found"
		else
			echo -e "[$R-$RST] $i executable not found. Please install it on your distro"
			exit 1;
		fi
	done
}

help () {
	echo "Create a raw partitioned img for rpi-(1-2-3) emulation on QEMU"
	echo -e "Default storage is in $G$SIMONPIFOLDER$RST"
	echo "usage: ./simonpi MODEL [<opts>]"
	echo "	Available MODELs:	rpi	rpi-2	rpi-3"
	echo "	<opts>	-h			print this message"
	echo "		-c			check filesystem integrity of disk image"
	echo "		-e			purge everything in storage folder"
	echo "		-k			kill every instance and network virtual interface"
	echo "		-l			list files in storage folder"
	echo "		-m			mount only loop devices ($DEVICE1, $DEVICE2)"
	echo "		-p			purge everything except for downloaded archives"
	echo "		-r			run QEMU processor emulator for defined model"
	echo "		-s	<size in G>	write a partitioned raw image disk with Arch Linux"
	echo "		-u			unmount ${MOUNTFOLDERS[0]} and ${MOUNTFOLDERS[1]} folders"
	echo "examples:"
	echo "	./simonpi rpi-3 -s 2		create a 2GB sd .img for rpi-3"
	echo "	./simonpi rpi-2 -p		purge everything related to rpi-2 img creation"
	exit 0
}

process_args () {
	# Process other arguments.
	case "$1" in
		-h    ) help ;;
		rpi   ) checkModel ;;
		rpi-2 ) checkModel ;;
		rpi-3 ) checkModel ;;
		-*    ) help ;;
		*     ) checkModel ;;
	esac
	case "$2" in
		-c	  ) checkRoot $@ && isMounted && checkMount && checkFs ;;
		-e	  ) checkRoot $@ && isMounted && checkMount && purge && purgeEverything ;;
		-k	  ) checkRoot $@ && checkQemu && killQemu && killNetwork ;;
		-l	  ) checkRoot $@ && listStorage ;;
		-m	  ) checkRoot $@ && isMounted && checkMount ;;
		-p	  ) checkRoot $@ && isMounted && checkMount && purge ;;
		-r    ) checkRoot $@ && isMounted && checkMount && presetsGen && run_emu ;;
		-s    ) checkRoot $@ && createArchImg ;;
		-u    ) checkRoot $@ && isMounted && checkMount ;;
 		*    ) help ;;
	esac
}

process_args $@;
